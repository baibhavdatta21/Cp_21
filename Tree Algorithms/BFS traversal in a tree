
//Just note here we will have to use an extra visited array as compared to dfs
void solver()
{
    int n; //Take the size of the number of vertices
    cin>>n;
    vector<vector<int>>adj(n+1); //defing the indices as 1 based as most problems in codeforces follow 1-based indexing
    for(int i=1;i<=n-1;i++)
    {
        int a,b;
        cin>>a>>b;
        adj[a].push_back(b);
        adj[b].push_back(a);
    }
    vector<int>tra;     // Holding the bfs traversal
    //dfs(1,-1,adj,tra);      // calling the bfs function taking the root node as 1

    queue<int>q;
    vector<int>vis(n+1,0);
    q.push(1);               //defing the queue for the bfs function
    tra.push_back(1);
    while(!q.empty())
    {
        int sz=q.size();
        for(int i=0;i<sz;i++)
        {
            int idx=q.front();
            q.pop();
            for(auto it:adj[idx])
            {
                if(vis[it]==0)
                {
                    vis[it]=1;
                    tra.push_back(it);
                    q.push(it);
                }
            }
        }
    }
    for(auto it:tra)
        cout<<it<<" ";      // printing the bfs function

}
